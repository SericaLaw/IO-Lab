Microsoft (R) Macro Assembler Version 6.11		    11/13/18 15:51:55
4.5.1_new.asm						     Page 1 - 1


 0000				DATA SEGMENT
 0000 0000			    OPD_DEC DW ?
 0002 0000			    OPD_BIN DW ?
 0004 0000			    OPD_A DW ?
 0006 0000			    OPD_B DW ?
 0008 0000			    INPUT DW 0
 000A 00			    OP DB 0
				    ; RESULT DW ?
 000B 000A			    TEN DW 10
 000D				DATA ENDS

 0000				CODE SEGMENT 'CODE'
				    ASSUME CS: CODE, DS: DATA
 0000				START:
 0000				INIT:
				    ; INIT DS
 0000  B8 0080			    MOV AX, 0080H
 0003  8E D8			    MOV DS, AX
 0005  C7 06 0008 R 0000	    MOV INPUT, 0
				    ; ENABLE A[7..0]
 000B  32 E4			    XOR AH, AH
 000D  B0 FF			    MOV AL, 0FFH
 000F  CD 32			    INT 32H
 0011				WAIT_INPUT:
 0011  33 D2			    XOR DX, DX
 0013  B1 04			    MOV CL, 4
 0015				WAIT_INPUT_LOOP:
				    ; READ INPUT
 0015  32 E4			    XOR AH, AH
 0017  CD 33			    INT 33H
				    ; TEST WHEATHER INPUT IS VALID
 0019  A8 10			    TEST AL, 10H
				    ; IF NOT VALID, KEEP WAITING
 001B  74 F8			    JZ WAIT_INPUT_LOOP
				    ; ELSE CLEAR STATUS BIT
 001D  24 0F			    AND AL, 0FH
				    ; IF (AL)>=OA, IT IS AN OPERATOR
 001F  3C 0A			    CMP AL, 0AH
 0021  73 0A			    JNC INPUT_OP    
				    ; ELSE IT IS A DIGIT
 0023  D3 E2			    SHL DX, CL
 0025  0A D0			    OR DL, AL
				    ; DISPLAY NEW INPUT
 0027  B4 01			    MOV AH, 1
 0029  CD 32			    INT 32H
 002B  EB E8			    JMP WAIT_INPUT_LOOP
 002D				INPUT_OP:
				    
				    ; IF OPERATOR IS ' ', DO NOTHING
 002D  3C 0E			    CMP AL, 0EH
 002F  74 E0			    JZ WAIT_INPUT
				    ; ELSE IF OPERATOR IS '=', CACULATE AND DISPLAY RESULT
 0031  3C 0F			    CMP AL, 0FH
 0033  74 31			    JZ INPUT_EQ

				    ; IF INPUT = 1, DO NOTHING AND WAIT '='
 0035  F7 06 0008 R 0001	    TEST INPUT, 1
 003B  75 D8			    JNZ WAIT_INPUT_LOOP
				    
				    ; ELSE, STORE THE FIRST OPD IN OPD_A AND SAVE OP
 003D  FF 06 0008 R		    INC INPUT
 0041  89 16 0000 R		    MOV OPD_DEC, DX
 0045  E8 00C1			    CALL DEC_TO_BIN
 0048  FF 36 0002 R		    PUSH OPD_BIN
 004C  8F 06 0004 R		    POP OPD_A   ; SAVE OPD_A
				    ; DEBUG
				    ; PUSH AX
				    ; MOV AH, 2
				    ; MOV DX, OPD_A
				    ; INT 32H
				    ; POP AX
				    ; SAVE OP
 0050  2C 0A			    SUB AL, 0AH
 0052  A2 000A R		    MOV OP, AL
				    ; DISPLAY OP ON LED
 0055  51			    PUSH CX
 0056  52			    PUSH DX ; SAVE SCENE
 0057  BA 0001			    MOV DX, 0001H
 005A  8A C8			    MOV CL, AL
 005C  D3 E2			    SHL DX, CL
 005E  32 E4			    XOR AH, AH
 0060  CD 30			    INT 30H
 0062  5A			    POP DX  ; RETRIEVE SCENE
 0063  59			    POP CX
				    
 0064  EB AB			    JMP WAIT_INPUT
 0066				INPUT_EQ:
 0066  FF 06 0008 R		    INC INPUT
				    ; SAVE OPD_B
 006A  89 16 0000 R		    MOV OPD_DEC, DX
 006E  E8 0098			    CALL DEC_TO_BIN
 0071  FF 36 0002 R		    PUSH OPD_BIN
 0075  8F 06 0006 R		    POP OPD_B
				    
				    ; DEBUG
				    ; PUSH AX
				    ; MOV AH, 2
				    ; MOV DX, OPD_B
				    ; INT 32H
				    ; POP AX
				    
				    ; CALCULATE AND DISPLAY
 0079  E8 0002			    CALL CALCULATE
				   
 007C  EB 82			    JMP START

 007E				CALCULATE PROC
 007E  A1 0004 R		    MOV AX, OPD_A
 0081  8B 1E 0006 R		    MOV BX, OPD_B
 0085  8A 0E 000A R		    MOV CL, OP
				 
 0089  80 F9 00			    CMP CL, 00H
 008C  74 0F			    JZ IS_ADD
 008E  80 F9 01			    CMP CL, 01H
 0091  74 11			    JZ IS_SUB
 0093  80 F9 02			    CMP CL, 02H
 0096  74 12			    JZ IS_MUL
 0098  80 F9 03			    CMP CL, 03H
 009B  74 16			    JZ IS_DIV
 009D				IS_ADD:     
 009D  03 C3			    ADD AX, BX
 009F  83 D2 00			    ADC DX, 0
				    ; JC E_OUT
 00A2  EB 29			    JMP R_OUT       ; REGULAR OUTPUT
 00A4				IS_SUB:     
 00A4  2B C3			    SUB AX, BX
 00A6  72 16			    JC E_OUT
 00A8  EB 23			    JMP R_OUT
 00AA				IS_MUL:     
 00AA  F7 E3			    MUL BX
 00AC  83 FA 01			    CMP DX, 1
 00AF  73 0D			    JNC E_OUT       ; IF DX>=1, THEN THE ANSWER IS INVALID AND JMP TO E_OUT
 00B1  EB 1A			    JMP R_OUT
 00B3				IS_DIV:    
 00B3  83 FB 00			    CMP BX, 0   ; BX SHOULD NOT BE ZERO
 00B6  74 06			    JZ E_OUT
 00B8  33 D2			    XOR DX, DX      ; SERICA: SET DX TO ZERO
 00BA  F7 F3			    DIV BX          ; DX(remainder), AX(result)<-(DX:AX)/(BX)
 00BC  EB 1E			    JMP DIV_OUT
 00BE				E_OUT:      
 00BE  BA E000			    MOV DX, 0E000H   ; SHOW E ON THE LEFTMOST DIGIT
 00C1  B4 02			    MOV AH, 2
 00C3  CD 32			    INT 32H         ; OUTPUT E
 00C5  33 D2			    XOR DX, DX
 00C7  B4 01			    MOV AH, 1
 00C9  CD 32			    INT 32H
 00CB  EB 27			    JMP WAIT_IN
 00CD				R_OUT:
 00CD  E8 0062			    CALL BIN_TO_DEC
 00D0				DISPLAY: 
				    ; DX STORES THE HIGH DIGITS WHILE BX STORES THE LOW DIGITS
 00D0  B4 02			    MOV AH, 2

 00D2  CD 32			    INT 32H ; SHOW THE HIGH DIGITS' INPUT
 00D4  8B D3			    MOV DX, BX
				    ; MOV AX, DX
				    ; CALL BIN_TO_DEC
				    ; MOV DX, AX

 00D6  B4 01			    MOV AH, 1
 00D8  CD 32			    INT 32H
 00DA  EB 18			    JMP WAIT_IN
 00DC				DIV_OUT:         ;DX and AX
 00DC  8B FA			    MOV DI,DX
 00DE  BA 0000			    MOV DX,0
 00E1  E8 004E			    CALL BIN_TO_DEC
 00E4  8B C7			    MOV AX,DI
 00E6  BA 0000			    MOV DX,0
 00E9  8B FB			    MOV DI,BX
 00EB  E8 0044			    CALL BIN_TO_DEC
 00EE  8B D3			    MOV DX,BX
 00F0  8B DF			    MOV BX,DI
 00F2  EB DC			    JMP DISPLAY
 00F4				WAIT_IN:    
 00F4  32 E4			    XOR AH, AH
 00F6  CD 33			    INT 33H
 00F8  A8 10			    TEST AL, 10H     
 00FA  74 F8			    JZ WAIT_IN
 00FC  33 D2			    XOR DX, DX
 00FE  CD 30			    INT 30H
 0100  B4 01			    MOV AH, 1
 0102  CD 32			    INT 32H
 0104  B4 02			    MOV AH, 2
 0106  CD 32			    INT 32H
 0108  C3			    RET
 0109				CALCULATE ENDP

 0109				DEC_TO_BIN PROC
				; PARAM OPD_DEC:
				; RETURN OPD_BIN:
				    ; SAVE SCENE
 0109  50			    PUSH AX
 010A  51			    PUSH CX
				    ; INIT
 010B  33 C0			    XOR AX, AX  ; AX STORES THE RESULT
 010D  B1 0C			    MOV CL, 12  ; USE CL AS LOOP COUNTER
 010F				DEC_TO_BIN_LOOP:
 010F  BF 000F			    MOV DI, 000FH ; USE DI AS MASK
 0112  D3 E7			    SHL DI, CL      ; ADJUST MASK ACCORDING TO CL
 0114  8B 16 0000 R		    MOV DX, OPD_DEC
 0118  23 D7			    AND DX, DI
 011A  D3 EA			    SHR DX, CL
 011C  8B F2			    MOV SI, DX  ; 
 011E  F7 26 000B R		    MUL TEN     ; (AX) *= 10, MIND IT WILL ALTER DX TOO
 0122  03 C6			    ADD AX, SI  ; (AX) += CURRENT DIGIT
 0124  80 E9 04			    SUB CL, 4
 0127  80 F9 00			    CMP CL, 0
 012A  7D E3			    JGE DEC_TO_BIN_LOOP
 012C  A3 0002 R		    MOV OPD_BIN, AX

				    ; RETRIEVE SCENE
 012F  59			    POP CX
 0130  58			    POP AX
 0131  C3			    RET
 0132				DEC_TO_BIN ENDP

 0132				BIN_TO_DEC PROC
				; PARAM DX:AX:  BIN
				; RETURN DX:BX: DEC
 0132  B9 0004			    MOV CX,4
 0135  BE 0000			    MOV SI,0
 0138  BB 0000			    MOV BX,0
 013B				BIN_TO_DEC_LOOP:
 013B  51			    PUSH CX
 013C  8B CE			    MOV CX,SI
 013E  F7 36 000B R		    DIV TEN     ; (DX:AX) / 10 商在AX 余数在DX
 0142  D3 E2			    SHL DX,CL
 0144  83 C6 04			    ADD SI,4
 0147  0B DA			    OR BX,DX    ;新得到的四位放在BX
 0149  BA 0000			    MOV DX,0
 014C  59			    POP CX
 014D  85 C0			    TEST AX,AX  ;判断商是否为0
 014F  E0 EA			    LOOPNZ BIN_TO_DEC_LOOP
 0151  F7 36 000B R		    DIV TEN
 0155  C3			    RET
 0156				BIN_TO_DEC ENDP

 0156				CODE ENDS
				END START
Microsoft (R) Macro Assembler Version 6.11		    11/13/18 15:51:55
4.5.1_new.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODE . . . . . . . . . . . . . .	16 Bit	 0156	  Para	  Private 'CODE'	
DATA . . . . . . . . . . . . . .	16 Bit	 000D	  Para	  Private 


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BIN_TO_DEC . . . . . . . . . . .	P Near	 0132	  CODE	Length= 0024 Private
CALCULATE  . . . . . . . . . . .	P Near	 007E	  CODE	Length= 008B Private
DEC_TO_BIN . . . . . . . . . . .	P Near	 0109	  CODE	Length= 0029 Private


Symbols:

                N a m e                 Type     Value    Attr

BIN_TO_DEC_LOOP  . . . . . . . .	L Near	 013B	  CODE	
DEC_TO_BIN_LOOP  . . . . . . . .	L Near	 010F	  CODE	
DISPLAY  . . . . . . . . . . . .	L Near	 00D0	  CODE	
DIV_OUT  . . . . . . . . . . . .	L Near	 00DC	  CODE	
E_OUT  . . . . . . . . . . . . .	L Near	 00BE	  CODE	
INIT . . . . . . . . . . . . . .	L Near	 0000	  CODE	
INPUT_EQ . . . . . . . . . . . .	L Near	 0066	  CODE	
INPUT_OP . . . . . . . . . . . .	L Near	 002D	  CODE	
INPUT  . . . . . . . . . . . . .	Word	 0008	  DATA	
IS_ADD . . . . . . . . . . . . .	L Near	 009D	  CODE	
IS_DIV . . . . . . . . . . . . .	L Near	 00B3	  CODE	
IS_MUL . . . . . . . . . . . . .	L Near	 00AA	  CODE	
IS_SUB . . . . . . . . . . . . .	L Near	 00A4	  CODE	
OPD_A  . . . . . . . . . . . . .	Word	 0004	  DATA	
OPD_BIN  . . . . . . . . . . . .	Word	 0002	  DATA	
OPD_B  . . . . . . . . . . . . .	Word	 0006	  DATA	
OPD_DEC  . . . . . . . . . . . .	Word	 0000	  DATA	
OP . . . . . . . . . . . . . . .	Byte	 000A	  DATA	
R_OUT  . . . . . . . . . . . . .	L Near	 00CD	  CODE	
START  . . . . . . . . . . . . .	L Near	 0000	  CODE	
TEN  . . . . . . . . . . . . . .	Word	 000B	  DATA	
WAIT_INPUT_LOOP  . . . . . . . .	L Near	 0015	  CODE	
WAIT_INPUT . . . . . . . . . . .	L Near	 0011	  CODE	
WAIT_IN  . . . . . . . . . . . .	L Near	 00F4	  CODE	

	   0 Warnings
	   0 Errors
